print("Hello world")
What Is Programming and Why Python?
Guido Van Rossum created the Python Programming language in February 1991. 
Python is an interpreted, high-level, general-purpose programming language.

Python allows us to create a game, build web apps, do general-purpose scripting, etc.

Before we dive into the details of Python, let's understand what the term Programming or Coding means?

Programming helps human beings to reduce hours of manual efforts.

In today's era, demand for programming is growing rapidly; i.e., there is a huge need for 
software developers and programmers in IT (Tech) Industries.

To write code on any language, we need a friendly platform where we can write the code 
and can execute it. For this, we use IDEs.

IDE – An IDE (Integrated Development Environment) is a software application that provides 
many comprehensive facilities to programmers for software or application development.

Python is used by many of the best tech companies. Few of those companies are:

Instagram
Facebook
Google
Reddit
Spotify
Quora
Dropbox
Netflix
Using Modules & Pip In Python
Sometimes we have to use someone else's code in our program because it saves us a lot of time. Today, we will learn a technique to use code that is not written by us but will enhance the quality of our program, save us time and energy, and of course, it is legal and free.

let us understand what utilities like modules and pip are,

Module – Module or library is a file that contains definitions of several functions, classes, variables, etc. which is written by someone else for us to use.

Pip – Pip is a package manager for Python i.e., pip command can be used to download any external module in Python. It is something that helps us to get code written by someone else.

We can install a module in our system by using pip command :

Open cmd or Powershell in your system.
And then, type pip install module_name and press enter.
Once you do that, the module will start downloading and will install automatically on your computer.
Example, for installing flask I will do this:
After installing any module in Python, you can import it into your Python program. For example, to use flask, I will type "import flask" at the top of my Python program.

import flask
There are two types of modules in Python:

Built-in Modules:
Built-in modules are the modules that are pre-installed in Python i.e., there is no need to download them. These modules come with python interpreter itself. For example :– random, os, etc.

To get a complete list of built-in modules of python head to the following page of the official documentation - https://docs.python.org/3/py-modindex.html.

External Modules:
These are the modules that are not pre-installed in Python i.e., we need to download them before using them in our program. For example :– Flask, Pandas, TensorFlow, etc.

Writing Our First Python Program
Today we will be writing our first program in Python Language. I know you are waiting from long to do this.

Let's get to business and start writing our first python program. Follow the below steps:

Open Pycharm and create a new file in it.
Keep in mind the file name should not match any module name.
After creating a new file, type:
print("Hello World")
Now run your program.
You will get the output as "Hello World" in your terminal.
o, this is our first python program, and in this program we just used print function. In this function, whatever we pass in parenthesis () in a double quote or single quote gets printed (as it is) in the terminal.

Make sure you have written and executed the below code to get a feel of what it looks like!

print("Hello world! I am learning Python from CodeWithHarry YouTube channel!")

Using Python As A Calculator
First of all, I would like to tell you one thing - the main motive of using Python is not to do raw calculations. You will perhaps never use python to calculate 3+8 or 34*232 for that matter.

Yeah, that’s true! Python is not just limited to do calculations. It has a vast number of uses and has many merits or advantages. Using Python you can do most of the things, such as creating games, apps, software, websites, etc. 
When you type python, you are inside an interactive python shell where you can type anything and the value is displayed on the screen after the computation. That's how you can use python as a calculator.

Comments, Escape Sequences & Print Statement
Comments are used to write something which the programmer does not want to execute. Comments can be written to mark author name, date when the program is written, adding notes for your future self, etc.

Comments are used to make the code more understandable for the programmer.
The Interpreter does not execute comments.

There are two types of comments in Python Language -:

Single Line Comment
Multi-Line Comment
Single Line Comment: Single Line comments are the comments which are written in a single line, i.e., they occupy the space of a single line.

We use # (hash/pound to write single-line comments).
E.g., the below program depicts the usage of comments.
import os
#This is a comment
print("Main code started")

#Now I will write my code here:
print(os.listdir())
Multi-Line Comment: Multi-Line comments are the comments which are created by using multiple lines, i.e., they occupy more than one line in a program.

We use ' ' '….. Comment ….' ' ' for writing multi-line comments in Python (Use lines enclosed with three quotes for writing multi-line comments). An example of a multi-line comment is shown below:
import os
'''This is a comment
Author: Harry
Date: 27 November 2020
Multi-line comment ends here
'''
print("Main code started")

#Now I will write my code here:
print(os.listdir())

Python Print() Statement:
print() is a function in Python that allows us to display whatever is written inside it. In case an operation is supplied to print, the value of the expression after the evaluation is printed in the terminal. For example,

import os
import flask

# print statement for printing strings
print("Harry is a programmer")

# Print statement with a literal
print(1+87)

#This will print "Harry is a programmer" and 88 on the screen respectively!
end: end argument allows us to put something at the end of the line after it is printed. In simple words, it allows us to continue the line with " " or ',' or anything we want to put inside these quotes of the end.
It simply joins two different print statements using some string or even by space. Example:

import os
import flask

# print statement for printing strings
print("Harry is a programmer", end="**")

# Print statement with a literal
print(1+87)

#This will print "Harry is a programmer**88" on the screen 

 
Escape Sequences :
An Escape Sequence character in Python is a sequence of characters that represents a single character.
It doesn't represent itself when used inside string literal or character.
It is composed of two or more characters starting with backslash \ but acts as a single character. Example \n depicts a new line character.
Some more examples of escape sequence characters are shown below:

Commonly Used Escape Sequences:
Escape Sequences	Description 
\n 	Inserts a new line in the text at the point
\\	Inserts a backslash character in the text at the point
\"	
Inserts a double quote character in the text at that point

\'	Inserts a single quote character in the text at that point
\t	
Inserts a tab in the text at that point

\f	Inserts a form feed ln the text at that point
\r	
Inserts a carriage return in the text at that point

\b	Inserts a backspace in the text at that point
 

Code file as described in the video
#Please dont remove this line
"""
This is a
Multiline Comment
"""
"""
This is a comment
"""
# print("Subscribe CodeWithHarry now","Bhai video bhi like kar dena")
# print("next line")
# print("C:\'narry")
print("Harry is \n good boy \t1") #comment after statement

Variables, Datatypes and Typecasting
Variable:
A variable is a name given to any storage area or memory location in a program.

In simple words, we can say that a variable is a container that contains some information, and whenever we need that information, we use the name of that container to access it. Let's create a variable:

a = 34 # Variable storing an integer
b = 23.2 # Variable storing real number
Here a and b are variables, and we can use a to access 34 and b to access 23.2. We can also overwrite the values in a and b

Variables, Datatypes and Typecasting
Variable:
A variable is a name given to any storage area or memory location in a program.

In simple words, we can say that a variable is a container that contains some information, and whenever we need that information, we use the name of that container to access it. Let's create a variable:

a = 34 # Variable storing an integer
b = 23.2 # Variable storing real number
Here a and b are variables, and we can use a to access 34 and b to access 23.2. We can also overwrite the values in a and b

Data Types in Python:
Primarily there are the following data types in Python.

Integers (<class 'int'>): Used to store integers
Floating point numbers (<class 'float'>): Used to store decimal or floating-point numbers
Strings (<class 'str'>): Used to store strings
Booleans (<class 'bool'>): Used to store True/False type values
None: None is literal to describe 'Nothing' in Python 
Rules for defining a variable in Python:
A variable name can contain alphabets, digits, and underscores (_). For E.g. : demo_xyz = ‘It’s a string variable’
A variable name can only start with an alphabet and underscore.
It can't start with a digit. For example, 5harry is illegal and not allowed.
No white space is allowed to be used inside a variable name.
Also, reserved keywords are not recommended to be used as variable names.
Examples of few valid variable names are harry, _demo, de_mo, etc.

Python is a fantastic language that automatically identifies the type of data for us. It means we need to put some data in a variable, and Python automatically understands the kind of data a variable is holding. Cool, isn't it?

Have a look at the code below:

# Variable in Python:
abc = "It's a string variable"
_abcnum = 40 # It is an example of int variable
abc123 = 55.854 # It is an example of float variable
print(_abcnum + abc123) # This will give sum of 40 + 55.854
type() Function in Python: type() function is a function that allows a user to find data type of any variable. It returns the data type of any data contained in the variable passed to it.
Have a look at the code below, which depicts the use of type function:

# type() Function in Python:
harry = "40" 
demo = 55.5 
demo = 40 
print (type(harry)) #It will give output as string type 
demo3 = type(demo) #It will return data type as float 
print(demo3) #It will print that data type 
print(type(demo2)) #It will give output as int type  
Note – We can't do numbers with strings arithmetic operations, i.e., we can't add a string to any number. Have a look at the example below:

var1 = "It's a String"
var2 = 5
print(var1+var2) ''' It will give an error as we can't add string to any number. '''
Note – We can add (concatenate) two or more strings, and the strings will be concatenated to return another string. Here is the example showing that:

var1 = "My Name is "
var2 = "Harry"
var3 = var1+var2+" & I am a Good Boy."
print(var1+var2) # It will give output 'My Name is Harry'
print(var3)

 
Typecasting :
Typecasting is the way to change one data type of any data or variable to another datatype, i.e., it changes the data type of any variable to some other data type.

I know it's a bit confusing but let me tell you in a simple manner. Suppose there is a string "34" Note: String is not integer since it is enclosed in double-quotes) and as we know, we can't add this to an integer number, let's say 6. But to do so, we can typecast this string to int data type, and then we can add 34+6 to get the output as 40. Have a look at the program below:

# Typecasting in Python :
abc = 5 
abc2 = '45'
abc3 = 55.95
xyz = 5.0

abc4=int(abc2)

print(abc+abc4) # Output : 50 
print(abc+int(abc2)) # Output : 50 

print(float(abc)+xyz) # It will add 5.0 + 5.0 and will return 10.0

print(str(abc)+45) # It will give an error as abc has been changed into string.
There are many functions to convert one data type into another type :

str() – this function allows us to convert some other data type into a string.

int() – this function allows us to convert some other data type into an integer. For example, str("34") returns 34 which is of type integer (int)

float() – this function allows us to convert some other data type into a floating-point number, i.e., a number with decimals.

input() Function – This function allows the user to receive input from the keyboard into the program as a string.

input() function always takes input as a string, i.e., if we ask the user to take a number as input, even then, it will take it as a string, and we will have to typecast it into another data type as per the use case.
If you enter 45 when the input() is called, you will get "45" as a string

# Input Function in Python:
print("Enter your name : ")
name = input() #It will take input from user
print(Your Name is",name) # It will show the name 
xyz = input(Enter your age : ")
print("Your age is ",xyz)

 
Quick Quiz: Create a program that takes two numbers as input from the user and then prints the sum of these numbers.

Solution :

# Quiz : 
print("Enter First Number : ")
num1= input()
print("Enter Second Number : ")
num2=input()
print("The Sum is",num2) #It will give output as sum of two numbers.
 

Code file as described in the video
var1 = "54"
var4 = "32"
var2 = 4
var3 = 36.7
# print(100 * str(int(var1) + int(var4)) )
# print(100 * "Hello world\n")
# print("Enter your number")
# inpnum = input()
#
# print("You entered", int(inpnum)+10)
"""
str()
int()
float()
"""

# print(type(var1))

print("Enter first number")
n1 = input()
print("Enter second number")
n2 = input()
print("Sum of these two numbers is", int(n1) + int(n2))

String Slicing And Other Functions In Python
The string is a data type in Python. Strings in Python programming language are arrays of bytes representing a sequence of characters. In simple terms, Strings are the combination or collection of characters enclosed in quotes. Strings are one of the most used data types in any programming language because most of the real-world data such as name, address, or any sequence which contains alphanumeric characters are mostly of type ‘String’.

Primarily, you will find three types of strings in Python :

Single Quote String – (‘Single Quote String’)
Double Quote String – (“Double Quote String”)
Triple Quote String – (‘’’ Triple Quote String ‘’’)
Let us now look into some functions you will use to manipulate or perform operations on strings.
len() Function : This len() function returns the total no. of characters in a string. E.g., for string a="abc", len(a) will return three as the output as it is a string variable containing 3 characters

E.g., Consider this string variable x

x = "String Demo"
This string variable x contains a string containing 11 characters (including spaces). Since the index in a string starts from 0 to length-1, this string can be looked at as:

Note: The indexes of a string begin from 0 to (length-1) in the forward direction and -1,-2,-3,…, -length in the backward direction. 

String Slicing :
As we know, the meaning of the word ‘slice’ is ‘a part of.’ I am sure you have sliced paneer cubes at home!
Just like paneer slice refers to the part of the paneer cube; In Python, the term ‘string slice’ refers to a part of the string, where strings are sliced using a range of indices.
To do string slicing, we just need to put the name of the string followed by [n:m]. It means ‘n’ denotes the index from which slicing should start, and ‘m’ denotes the index at which slicing should terminate or complete. Let's look into an example!


In Python, string slicing s[n:m] for a string s is done as characters of s from n to m-1. It means characters are taken from the first index to the second index-1.
E.g., abc="Demo" then abc[0:3] will give ‘Dem’ and will not give ‘Demo’ coz index number of ‘D’ is 0, ‘e’ is 1, ‘m’ is 2, and ‘o’ is 3. So it will give a range from n to m-1, i.e., 0 to 3-1=2. That’s why we got the output ‘Dem’.

In string slicing, we sometimes need to give a skip value i.e. string[n:m:skip_value]. This simply takes every skip_valueth character. By default, the skip value is 1 but if we want to choose alternate characters of a string then we can give it as 2. Have a look at the example below:
Let's end this tutorial by looking into some of the most used string functions :
string.endswith(): This function allows the user to check whether a given string ends with a passed argument or not. It returns True or False.

string.count(): This function counts the total no. of occurrences of any character in the string. It takes the character whose occurrence you want to find as an argument.

string.capitalize(): This function capitalizes the first character of any string. It doesn’t take any argument.

string.upper(): It returns the copy of the string converted to the uppercase.

string.lower(): It returns the copy of the string converted to lower case.

string.find(): This function finds any given character or word in the entire string. It returns the index of the first character from that word.

string.replace(“old_word”, “new_word”): This function replaces the old word or character with a new word or character from the entire string.

# String Functions:

demo = "Aakash is a good boy" 
print(demo.endswith("boy"))
print(demo.count('o'))
print(demo.capitalize())
print(demo.upper())
print(demo.lower())
print(demo.find("is")
print(demo.find("good","nice"))

mystr = "Harry is a good boy"
# print(len(mystr))
# print(mystr[::-2])

print(mystr.endswith("bdoy"))
print(mystr.count("o"))
print(mystr.capitalize())
print(mystr.replace("is", "are"))

Python Lists And List Functions
Python lists are containers used to store a list of values of any data type. In simple words, we can say that a list is a collection of elements from any data type. E.g.

list1 = ['harry', 'ram', 'Aakash', 'shyam', 5, 4.85]
The above list contains strings, an integer, and even an element of type float. A list can contain any kind of data, i.e., it’s not mandatory to form a list of only one data type. The list can contain any kind of data in it.

Do you remember we saw indexing in strings? List elements can also be accessed by using Indices, i.e., the first element of the list has 0 index and the second element has one as its index, and so on.


 
Note: If you put an index that isn’t in the list, you will get an error. i.e., if a list named list1 contains four elements, list1[4] will throw an error because the list index starts from 0 and goes up to (index-1) or 3.
Have a look at the examples below:

                        Lists in Python

[]                                             # list with no member, empty list
[1, 2, 3]                                    # list of integers 
[1, 2.5, 3.7, 9]                           # list of numbers (integers and floating point)
['a', 'b', 'c']                               # lisst of characters
['a', 1, 'b', 3.5, 'zero']                # list of mixed value types
['One', 'Two', 'Three']               # list of strings 
List Methods :
Here is the list of list methods in Python. These methods can be used in any python list to produce the desired output.

# List Methods :
l1=[1,8,4,3,15,20,25,89,65]       #l1 is a list
print(l1)

l1.sort()
print(l1)      #l1 after sorting
l1.reverse()
print(l1)      #l1 after reversing all elements
List Slicing :
List slices, like string slices, return a part of a list extracted out of it. Let me explain; you can use indices to get elements and create list slices as per the following format :

seq = list1[start_index:stop_index]
Just like we saw in strings, slicing will go from a start index to stop_index-1. The seq list, a slice of list1, contains elements from the specified start_index to specified (stop_index – 1).

List Methods:
There are a lot of list methods that make our life easy while using lists in python. Let's have a look at a few of them below:

# List Methods :- 
list1=[1,2,3,6,,5,4]     #list1 is a list

list1.append(7)    # This will add 7 in the last of list 
list1.insert(3,8)    # This will add 8 at 3 index in list
list1.remove(1)    #This will remove 1 from the list 
list1.pop(2)          #This will delete and return index 2 value.
Tuples in Python:
A tuple is an immutable data type in Python. A tuple in python is a collection of elements enclosed in () (parentheses). Tuple, once defined, can’t be changed, i.e., its elements or values can’t be altered or manipulated.

# Tuples in Python :
a=()    # It's an example of empty tuple
x=(1,)   # Tuple with single value i.e. 1 
tup1 = (1,2,3,4,5)
tup1 = ('harry', 5, 'demo', 5.8)
Note: To create a tuple of one element, it is necessary to put a comma  ‘,’ after that one element like this tup=(1,) because if we have only 1 element inside the parenthesis, the python interpreter will interpret it as a single entity which is why it’s important to use a ‘,’ after the element while creating tuples of a single element.

Swapping of two numbers
Python provides a very handy way of swapping two numbers like below:

# Swapping of two numbers :
a = 10 
b = 15
print(a,b)     #It will give output as: 10 15
a,b = b,a 
print(a,b)     #It will give output as: 15 10
Code file as described in the video
grocery = ["Harpic", "vim bar", "deodrant", "Bhindi",
           "Lollypop", 56]
# print(grocery[5])
numbers = [2, 7, 9, 11, 3]
# numbers.remove(9)
# numbers.pop()
# numbers.sort()
# numbers = []
# numbers.reverse()
# numbers.append(1)
# numbers.append(72)
# numbers.append(5)
# numbers.insert(2, 67)
# print(numbers)
# 3, 11, 9, 7, 2
# print(numbers)
# numbers[1] = 98
# print(numbers)
# Mutable - can change
# Immutable - cannot change
# tp = (1,)
# print(tp)
a= 1
b = 8
a, b = b,a
# temp = a
# a = b
# b = temp
print(a, b)


